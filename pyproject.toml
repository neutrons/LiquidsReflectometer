[project]
name = "lr_reduction"
authors = [{ name = "Mat", email = "m2d@ornl.gov" }]
description = "Reduction backend for the Liquids Reflectometer."
keywords = ["neutrons", "reflectometry", "reduction"]
dynamic = ["version"]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Topic :: Scientific/Engineering :: Physics",
]

[project.urls]
homepage = "https://github.com/neutrons/LiquidsReflectometer"
repository = "https://github.com/neutrons/LiquidsReflectometer"
documentation = "https://lr-reduction.readthedocs.io/latest/index.html"

#####################################
#  BUILDING FROM SOURCES WITH HATCH
#####################################
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "toml", "versioningit"]

[tool.hatch.version]
source = "versioningit"

[tool.hatch.build.hooks.versioningit-onbuild]
source-file = "reduction/lr_reduction/_version.py"
build-file = "lr_reduction/_version.py"
replacement = '"{next_version}"'

[tool.hatch.build]
artifacts = [
  "reduction/lr_reduction/_version.py",
  "reduction/lr_reduction/**/*.yml",
  "reduction/lr_reduction/**/*.yaml",
  "reduction/lr_reduction/**/*.ini"
]

[tool.hatch.build.targets.wheel]
packages = ["reduction/lr_reduction"]

#################
#  VERSIONINGIT
#################
[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.versioningit.next-version]
method = "minor"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}"
dirty = "{version}+d{build_date:%Y%m%d}"
distance-dirty = "{next_version}.dev{distance}+d{build_date:%Y%m%d%H%M}"

[tool.versioningit.write]
file = "reduction/lr_reduction/_version.py"

####################################################################
#  CREATING CONDA ENVIRONMENT AND BUILDING CONDA PACKAGE WITH PIXI
####################################################################
[tool.pixi.workspace]
preview = ["pixi-build"]
channels = [
  "mantid-ornl",
  "conda-forge",
  "https://prefix.dev/pixi-build-backends",
  "https://prefix.dev/conda-forge"
]
platforms = ["linux-64"]  # add additional platforms as needed

# Conda packages to be installed in the environments
[tool.pixi.dependencies]
python = ">=3.10"
lmfit = "*"
mantid = ">=6.12.0.2"
matplotlib = ">=3.9.4,<4"
argcomplete = ">=3.6.2,<4"

# Pypi packages to be installed in the environments with `pip`
[tool.pixi.pypi-dependencies]
lr_reduction = { path = ".", editable = true }  # editable install of lr_reduction
toml-cli = "*"

[tool.pixi.package]
name = "lr_reduction"
version = "0.0.0"  # a placeholder overwritten when Pixi task "sync-version" is executed

[tool.pixi.package.build]
backend = { name = "pixi-build-python", version = "0.1.*" }

# Conda packages (no PyPi) to be enumerated within the conda package to be built.
[tool.pixi.package.run-dependencies]
python = ">=3.10"
lmfit = "*"
mantid = ">=6.12.0.2"
matplotlib = ">=3.9.4,<4"

###################################
#  PIXI FEATURES AND ENVIRONMENTS
###################################
[tool.pixi.feature.installer.dependencies]  # necessary to install and inspect
hatch= "*"
pip = "*"
versioningit = "*"
conda-tree = "*"

[tool.pixi.feature.developer.dependencies]  # necessary for development and testing
pre-commit = "*"
ruff = "*"
codecov = "*"
pytest = "*"
pytest-cov = "*"

[tool.pixi.feature.package.dependencies]  # necessary to build the conda package
boa = "*"
anaconda-client = ">=1.13.0,<2"

[tool.pixi.feature.docs.dependencies]  # necessary for building the documentation
sphinx = "*"
sphinx_rtd_theme = "*"
myst-parser = "*"

[tool.pixi.environments]
default = {features = ["installer", "developer", "package", "docs"], solve-group = "default"}  # created by `pixi install`
docs = {features = ["installer", "docs"], solve-group = "default"}  # created by `pixi install docs`

###############
#  PIXI TASKS
###############
[tool.pixi.tasks]
# Subtasks (tasks other tasks depend on)
clean-all = { description = "Clean all build artifacts", depends-on = ["clean-docs", "clean-conda"] }
sync-version = { cmd = 'version=$(python -m versioningit); toml set tool.pixi.package.version "$version" --toml-path pyproject.toml', description = "Sync pyproject.toml version with Git version" }
reset-version = { cmd = "toml set tool.pixi.package.version \"0.0.0\" --toml-path pyproject.toml", description = "Reset the package version to 0.0.0" }
conda-builder = { cmd = "pixi build", description = "Command that creates the conda package" }
# Packaging
build-conda = { description = "Build the conda package", depends-on = ["sync-version", "conda-builder", "reset-version"] }
clean-conda = { cmd = "rm -f *.conda", description = "Clean the local .conda build artifacts" }
# Documentation
build-docs = { cmd = 'cd docs && make html SPHINXOPTS="-W --keep-going -n" && echo -e "##########\n DOCS point your browser to file://$(pwd)/build/html/index.html\n##########"', description = "Build the documentation" }
clean-docs = { cmd = "rm -rf docs/build", description = "Clean the documentation build artifacts" }

#############
#  COVERAGE
#############
[tool.coverage.run]
branch = true

[tool.coverage.report]
skip_empty = true

###########
#  PYTEST
###########
[tool.pytest.ini_options]
pythonpath = [
  ".",
  "reduction",
  "scripts",
  "tests/data/liquidsreflectometer-data/nexus/",
]
testpaths = ["tests"]
norecursedirs = [
  ".git",
  "tmp*",
  "_tmp*",
  "__pycache__",
  "*dataset*",
  "*data_set*",
]
markers = [
  "datarepo: mark a test as using LiquidsReflectometer-data repository",
  "scripts: mark a test as a script that should be run manually",
]

#########
#  RUFF
#########
[tool.ruff]
line-length = 120
select = ["A", "ARG","ASYNC","BLE","C90", "E", "F", "I", "N", "UP032", "W"]
exclude = ["notebooks/**", "**/*.ipynb"]
ignore = [
  "E402", # module level import not at top of file
  "E722", # bare except
  "E741",
  "E743", # ambiguous function name, generally 'l'
  "F403", # wild imports
  "F405",
  "F821", # unknown names from probably from wild imports
]
[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["lr_reduction"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
